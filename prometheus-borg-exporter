#!/usr/bin/env python
# coding: utf-8 
import socket
import subprocess
import re
from datetime import datetime
import time
import shutil
from optparse import OptionParser

optp = OptionParser()

optp.add_option('-r', '--repository', help='Select repository to update from',
            dest='repository')

optp.add_option('-f', '--force-host', help='Override manually the host for this repository. Default to the local machine hostname',
            dest='host')

optp.add_option('-o', '--output', help='Set output prom filename. Default to borg.prom',
            dest='output')
opts, args = optp.parse_args()

if opts.repository is None:
    opts.repository= raw_input("Borg repository: ")

repository = opts.repository

if opts.host is None:
    hostname=socket.gethostname()
else:
    hostname=opts.host
    
textfile_collector_dir="/var/lib/prometheus/node-exporter"
if opts.output is None:
    prom_file=textfile_collector_dir+"/backup.prom"
else:
    prom_file=textfile_collector_dir+"/"+opts.output
    
def print_prom(archive, parameter, value):
    tmp_file.write(parameter+"{host=\""+hostname+"\", archive=\""+archive+"\"} "+str(value)+"\n")

def calc_bytes(value, unit):
    if unit=='kB':
        return value * 1024
    elif unit=='MB':
        return value * 1024 * 1024
    elif unit=='GB':
        return value * 1024 * 1024 * 1024
    elif unit=='TB':
        return value * 1024 * 1024 * 1024 * 1024

print "Updating Prometheus for Borg repository "+repository+" (host: "+hostname+")"
tmp_file_name=prom_file+".tmp"

cmd_borg_list=["borg","list",repository]
proc_borg_list = subprocess.Popen(cmd_borg_list, stdout=subprocess.PIPE)

archives = {}

count_archives = 0
for archive in proc_borg_list.stdout.readlines():
    #print "Raw: "+archive
    m=re.search(r"^(?P<archive>\S+)-(?P<date>\d{4}-\d{2}-\d{2})\S+(?P<time>\d{2}:\d{2}:\d{2})\S*\s", archive)
    m2=re.search(r"^(?P<name>\S+)\s", archive)
    if m is not None:
        count_archives = count_archives+1

        this_archive={'name':m2.group('name'), 'datetime':datetime.strptime(m.group('date')+" "+m.group('time'), '%Y-%m-%d %H:%M:%S')}

        if m.group('archive') in archives:
            # An archive with the same name exists, we need to check which is the more recent
            if archives[m.group('archive')]['datetime']<this_archive['datetime']:
                archives[m.group('archive')]=this_archive


        else:
            # No archive exists for this name, we add it.
            archives[m.group('archive')]=this_archive

print str(len(archives))+" different archives"
print str(count_archives)+" archives in total"

# Creating empty file
tmp_file = open(tmp_file_name,"w") 

for archive, value in archives.iteritems():
    archive_name=value['name']
    archive_datetime=value['datetime']

    print "updating "+archive+" from archive "+archive_name
    print_prom(archive, "backup_last_update", time.mktime(archive_datetime.timetuple()))

    cmd_borg_info=["borg","info",repository+"::"+archive_name]
    proc_borg_info = subprocess.Popen(cmd_borg_info, stdout=subprocess.PIPE)
    for line in proc_borg_info.stdout.readlines():
        m=re.search("Number of files: (?P<files_number>\d*)", line)
        if m:
            print_prom(archive, "backup_files", m.group('files_number'))

        m=re.search("Chunk index:\s*(?P<chunk_index_unique>\d*)\s*(?P<chunk_index_total>\d*)", line)
        if m:
            print_prom(archive, "backup_chunks_unique", m.group('chunk_index_unique'))
            print_prom(archive, "backup_chunks_total", m.group('chunk_index_total'))

        m=re.search("This archive:\s*(?P<original_size>\d*.\d*)\s(?P<original_size_unit>[A-Za-z]{2})\s*(?P<compressed_size>\d*.\d*)\s(?P<compressed_size_unit>[A-Za-z]{2})\s*(?P<total_size>\d*.\d*)\s(?P<total_size_unit>[A-Za-z]{2})", line)
        if m:
            print_prom(archive, "backup_last_size", calc_bytes(float(m.group('original_size')), m.group('original_size_unit')))
            print_prom(archive, "backup_last_size_compressed", calc_bytes(float(m.group('compressed_size')), m.group('compressed_size_unit')))
            print_prom(archive, "backup_last_size_dedup", calc_bytes(float(m.group('total_size')), m.group('total_size_unit')))

        m=re.search("All archives:\s*(?P<original_size>\d*.\d*)\s(?P<original_size_unit>[A-Za-z]{2})\s*(?P<compressed_size>\d*.\d*)\s(?P<compressed_size_unit>[A-Za-z]{2})\s*(?P<total_size>\d*.\d*)\s(?P<total_size_unit>[A-Za-z]{2})", line)
        if m:
            print_prom(archive, "backup_total_size", calc_bytes(float(m.group('original_size')), m.group('original_size_unit')))
            print_prom(archive, "backup_total_size_compressed", calc_bytes(float(m.group('compressed_size')), m.group('compressed_size_unit')))
            print_prom(archive, "backup_total_size_dedup", calc_bytes(float(m.group('total_size')), m.group('total_size_unit')))

tmp_file.close()
shutil.move(tmp_file_name, prom_file)
